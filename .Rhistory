bothRegressions %>%
dplyr::select(SalePrice.Predict, SalePrice, Regression) %>%
ggplot(aes(SalePrice, SalePrice.Predict)) +
geom_point() +
stat_smooth(aes(SalePrice, SalePrice),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(SalePrice.Predict, SalePrice),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
facet_wrap(~Regression) +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
st_drop_geometry(bothRegressions) %>%
gather(Variable, Value, -Regression, -Name) %>%
filter(Variable == "SalePrice.AbsError" | Variable == "SalePrice.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
tracts17 <-
get_acs(geography = "tract", variables = c("B01001_001E","B01001A_001E","B06011_001"),
year = 2017, state=25, county=025, geometry=T, output = "wide") %>%
st_transform('ESRI:102286')  %>%
rename(TotalPop = B01001_001E,
NumberWhites = B01001A_001E,
Median_Income = B06011_001E) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority White", "Majority Non-White"),
incomeContext = ifelse(Median_Income > 32322, "High Income", "Low Income"))
grid.arrange(ncol = 2,
ggplot() + geom_sf(data = na.omit(tracts17), aes(fill = raceContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Race Context") +
labs(title = "Race Context") +
mapTheme() + theme(legend.position="bottom"),
ggplot() + geom_sf(data = na.omit(tracts17), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() + theme(legend.position="bottom"))
unlink("Documents/GitHub/ppa.assignment/MidtermHW_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat.explore)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(tidycensus)
library(classInt)   # for KDE and ML risk class intervals
# functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
policeDistricts <-
st_read("https://data.cityofchicago.org/api/geospatial/fthy-xz3r?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = dist_num)
policeBeats <-
st_read("https://data.cityofchicago.org/api/geospatial/aerh-rz74?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = beat_num)
bothPoliceUnits <- rbind(mutate(policeDistricts, Legend = "Police Districts"),
mutate(policeBeats, Legend = "Police Beats"))
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY")
View(burglaries)
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY") %>%
mutate(x = gsub("[()]", "", Location))
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY") %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",")
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY") %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",") %>%
mutate(X = as.numeric(X),Y = as.numeric(Y)) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant")
# uses grid.arrange to organize independent plots
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = chicagoBoundary) +
geom_sf(data = burglaries, colour="red", size=0.1, show.legend = "point") +
labs(title= "Burlaries, Chicago - 2017") +
mapTheme(title_size = 14),
ggplot() +
geom_sf(data = chicagoBoundary, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(burglaries)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis() +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Burglaries") +
mapTheme(title_size = 14) + theme(legend.position = "none"))
chicagoBoundary <-
st_read(file.path(root.dir,"/Chapter5/chicagoBoundary.geojson")) %>%
st_transform('ESRI:102271')
# uses grid.arrange to organize independent plots
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = chicagoBoundary) +
geom_sf(data = burglaries, colour="red", size=0.1, show.legend = "point") +
labs(title= "Burlaries, Chicago - 2017") +
mapTheme(title_size = 14),
ggplot() +
geom_sf(data = chicagoBoundary, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(burglaries)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis() +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Burglaries") +
mapTheme(title_size = 14) + theme(legend.position = "none"))
policeDistricts <-
st_read("https://data.cityofchicago.org/api/geospatial/fthy-xz3r?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = dist_num)
policeBeats <-
st_read("https://data.cityofchicago.org/api/geospatial/aerh-rz74?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = beat_num)
bothPoliceUnits <- rbind(mutate(policeDistricts, Legend = "Police Districts"),
mutate(policeBeats, Legend = "Police Beats"))
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY") %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",") %>%
mutate(X = as.numeric(X),Y = as.numeric(Y)) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant")%>%
st_transform('ESRI:102271') %>%
distinct()
chicagoBoundary <-
st_read(file.path(root.dir,"/Chapter5/chicagoBoundary.geojson")) %>%
st_transform('ESRI:102271')
# uses grid.arrange to organize independent plots
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = chicagoBoundary) +
geom_sf(data = burglaries, colour="red", size=0.1, show.legend = "point") +
labs(title= "Burlaries, Chicago - 2017") +
mapTheme(title_size = 14),
ggplot() +
geom_sf(data = chicagoBoundary, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(burglaries)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis() +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Burglaries") +
mapTheme(title_size = 14) + theme(legend.position = "none"))
# Chunk 1
library(devtools)
devtools::install_github("Chicago/RSocrata")
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat.explore)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(tidycensus)
library(classInt)   # for KDE and ML risk class intervals
# functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# Chunk 3
policeDistricts <-
st_read("https://data.cityofchicago.org/api/geospatial/fthy-xz3r?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = dist_num)
policeBeats <-
st_read("https://data.cityofchicago.org/api/geospatial/aerh-rz74?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = beat_num)
bothPoliceUnits <- rbind(mutate(policeDistricts, Legend = "Police Districts"),
mutate(policeBeats, Legend = "Police Beats"))
burglaries <-
read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr") %>%
filter(Primary.Type == "BURGLARY" & Description == "FORCIBLE ENTRY") %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",") %>%
mutate(X = as.numeric(X),Y = as.numeric(Y)) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant")%>%
st_transform('ESRI:102271') %>%
distinct()
chicagoBoundary <-
st_read(file.path(root.dir,"/Chapter5/chicagoBoundary.geojson")) %>%
st_transform('ESRI:102271')
# Chunk 4
# uses grid.arrange to organize independent plots
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = chicagoBoundary) +
geom_sf(data = burglaries, colour="red", size=0.1, show.legend = "point") +
labs(title= "Burlaries, Chicago - 2017") +
mapTheme(title_size = 14),
ggplot() +
geom_sf(data = chicagoBoundary, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(burglaries)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis() +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Burglaries") +
mapTheme(title_size = 14) + theme(legend.position = "none"))
## using {sf} to create the grid
## Note the `.[chicagoBoundary] %>% ` line. This is needed to clip the grid to our data
fishnet <-
st_make_grid(chicagoBoundary,
cellsize = 500,
square = TRUE) %>%   # use plot() could see a grid is created here
.[chicagoBoundary] %>%            # fast way to select intersecting polygons
st_sf() %>%
mutate(uniqueID = 1:n())          # to help join data back later
View(fishnet)
## add a value of 1 to each crime, sum them with aggregate
crime_net <-
dplyr::select(burglaries) %>%   # de-select everything except than the geometry
mutate(countBurglaries = 1) %>%   # add weight to the burglaries
aggregate(., fishnet, sum) %>%
mutate(countBurglaries = replace_na(countBurglaries, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE)) # ID for cross-validation
# cvID = sample(round(nrow(fishnet) / 24), size=nrow(fishnet), replace = TRUE)：创建一个名为cvID的新列，用于标识交叉验证（cross-validation）的折叠（folds）。该列的值是通过对 fishnet中的网格数量进行采样生成的。sample函数用于从1到（网格数量除以24取整）之间随机抽取值，抽取的数量与网格数量相同，参数 replace = TRUE 表示可以重复抽样。
ggplot() +
geom_sf(data = crime_net, aes(fill = countBurglaries), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Burglaires for the fishnet") +
mapTheme()
# For demo. requires updated mapview package
# xx <- mapview::mapview(crime_net, zcol = "countBurglaries")
# yy <- mapview::mapview(mutate(burglaries, ID = seq(1:n())))
# xx + yy
View(crime_net)
# uses grid.arrange to organize independent plots
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = chicagoBoundary) +
geom_sf(data = burglaries, colour="red", size=0.1, show.legend = "point") +
labs(title= "Burlaries, Chicago - 2017") +
mapTheme(title_size = 14),
ggplot() +
geom_sf(data = chicagoBoundary, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(burglaries)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis() +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Burglaries") +
mapTheme(title_size = 14) + theme(legend.position = "none"))
## add a value of 1 to each crime, sum them with aggregate
crime_net <-
dplyr::select(burglaries) %>%   # de-select everything except than the geometry
mutate(countBurglaries = 1) %>%   # add weight to the burglaries
aggregate(., fishnet, sum) %>%
mutate(countBurglaries = replace_na(countBurglaries, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE)) # ID for cross-validation
# cvID = sample(round(nrow(fishnet) / 24), size=nrow(fishnet), replace = TRUE)：创建一个名为cvID的新列，用于标识交叉验证（cross-validation）的折叠（folds）。该列的值是通过对 fishnet中的网格数量进行采样生成的。sample函数用于从1到（网格数量除以24取整）之间随机抽取值，抽取的数量与网格数量相同，参数 replace = TRUE 表示可以重复抽样。
ggplot() +
geom_sf(data = crime_net, aes(fill = countBurglaries), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Burglaires for the fishnet") +
mapTheme()
# For demo. requires updated mapview package
# xx <- mapview::mapview(crime_net, zcol = "countBurglaries")
# yy <- mapview::mapview(mutate(burglaries, ID = seq(1:n())))
# xx + yy
# convinience to reduce length of function names.
st_c    <- st_coordinates
st_coid <- st_centroid
## create NN from abandoned cars, with the centroid of fishnet
vars_net <- vars_net %>%
mutate(Abandoned_Cars.nn = nn_function(st_c(st_coid(vars_net)),
st_c(abandonCars),
k = 3))
vars_net <- abandonCars %>%
st_join(fishnet, join=st_within) %>%  # assign the value of fishnet to the point
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
left_join(fishnet, ., by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
dplyr::select(-`<NA>`) %>%
ungroup()
## only pulling a single variable for our model to keep it simple
## using Socrata again
abandonCars <-
read.socrata("https://data.cityofchicago.org/Service-Requests/311-Service-Requests-Abandoned-Vehicles/3c9v-pnva") %>%
mutate(year = substr(creation_date,1,4)) %>% filter(year == "2017") %>%
dplyr::select(Y = latitude, X = longitude) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant") %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "Abandoned_Cars")
## Neighborhoods to use in LOOCV in a bit
neighborhoods <-
st_read("https://raw.githubusercontent.com/blackmad/neighborhoods/master/chicago.geojson") %>%
st_transform(st_crs(fishnet))
# convinience to reduce length of function names.
st_c    <- st_coordinates
st_coid <- st_centroid
## create NN from abandoned cars, with the centroid of fishnet
vars_net <- vars_net %>%
mutate(Abandoned_Cars.nn = nn_function(st_c(st_coid(vars_net)),
st_c(abandonCars),
k = 3))
vars_net <- abandonCars %>%
st_join(fishnet, join=st_within) %>%  # assign the value of fishnet to the point
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
left_join(fishnet, ., by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
dplyr::select(-`<NA>`) %>%
ungroup()
# convinience to reduce length of function names.
st_c    <- st_coordinates
st_coid <- st_centroid
## create NN from abandoned cars, with the centroid of fishnet
vars_net <- vars_net %>%
mutate(Abandoned_Cars.nn = nn_function(st_c(st_coid(vars_net)),
st_c(abandonCars),
k = 3))
# use 'plot(vars_net)' to check the result of vars_net
## Visualize the NN feature
vars_net.long.nn <-
dplyr::select(vars_net, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
ggplot() +
geom_sf(data = vars_net.long.nn, aes(fill=value), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Abandoned Car NN Distance") +
mapTheme()
## important to drop the geometry from joining features
final_net <-
left_join(crime_net, st_drop_geometry(vars_net), by="uniqueID")
final_net <-
st_centroid(final_net) %>%
st_join(dplyr::select(neighborhoods, name)) %>%
st_join(dplyr::select(policeDistricts, District)) %>%
st_drop_geometry() %>%
left_join(dplyr::select(final_net, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
# for live demo
# mapview::mapview(final_net, zcol = "District")
mapview::mapview(final_net, zcol = "District")
local_morans <- localmoran(final_net$Abandoned_Cars, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
## generates warnings from PROJ issues
## {spdep} to make polygon to neighborhoods...
final_net.nb <- poly2nb(as_Spatial(final_net), queen=TRUE)
## ... and neighborhoods to list of weigths
final_net.weights <- nb2listw(final_net.nb, style="W", zero.policy=TRUE)
# print(final_net.weights, zero.policy=TRUE)
local_morans <- localmoran(final_net$Abandoned_Cars, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
## see ?localmoran
local_morans <- localmoran(final_net$Abandoned_Cars, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
# use glimpse to check local_morans
# join local Moran's I results to fishnet
final_net.localMorans <-
cbind(local_morans, as.data.frame(final_net)) %>%
st_sf() %>%
dplyr::select(Abandoned_Cars_Count = Abandoned_Cars,
Local_Morans_I = Ii,
P_Value = `Pr(z != E(Ii))`) %>%
mutate(Significant_Hotspots = ifelse(P_Value <= 0.001, 1, 0)) %>%
gather(Variable, Value, -geometry)
view(final_net.localMorans)
## This is just for plotting
vars <- unique(final_net.localMorans$Variable)
varList <- list()
for(i in vars){
varList[[i]] <-
ggplot() +
geom_sf(data = filter(final_net.localMorans, Variable == i),
aes(fill = Value), colour=NA) +
scale_fill_viridis(name="") +
labs(title=i) +
mapTheme(title_size = 14) + theme(legend.position="bottom")}
do.call(grid.arrange,c(varList, ncol = 4, top = "Local Morans I statistics, Burglary"))
## see ?localmoran
local_morans <- localmoran(final_net$Abandoned_Cars, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
# use glimpse to check local_morans
# join local Moran's I results to fishnet
final_net.localMorans <-
cbind(local_morans, as.data.frame(final_net)) %>%
st_sf() %>%
dplyr::select(Abandoned_Cars_Count = Abandoned_Cars,
Local_Morans_I = Ii,
P_Value = `Pr(z != E(Ii))`) %>%
mutate(Significant_Hotspots = ifelse(P_Value <= 0.001, 1, 0)) %>%
gather(Variable, Value, -geometry)
View(final_net.localMorans)
local_morans <- localmoran(final_net$Abandoned_Cars, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
# use glimpse to check local_morans
final_net.localMorans <-
cbind(local_morans, as.data.frame(final_net))
View(final_net.localMorans)
View(local_morans)
View(final_net)
ggplot() +
geom_sf(data = final_net, aes(fill=abandoned.isSig.dist), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Abandoned Car NN Distance") +
mapTheme()
# generates warning from NN
final_net <- final_net %>%
mutate(abandoned.isSig =
ifelse(local_morans[,5] <= 0.001, 1, 0)) %>%
mutate(abandoned.isSig.dist =
nn_function(st_c(st_coid(final_net)),
st_c(st_coid(filter(final_net,
abandoned.isSig == 1))),
k = 1))
## What does k = 1 represent?
ggplot() +
geom_sf(data = final_net, aes(fill=abandoned.isSig.dist), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Abandoned Car NN Distance") +
mapTheme()
7.5 * 1000000 * (1.05^30)
7.5 * 1000000 * (1.05^30) - 140*1000000 - 1000000 * (1.03^29) - 800000*30 - 4000000 * (0.12^30)
hh <- read.csv("/Users/xiaofan/Desktop/UPenn-Musa-Fall/CPLN5500 TP/lectures lab/ Transportation data and the transportation plan/1_Household_Public.csv")
trip <- read.csv("/Users/xiaofan/Desktop/UPenn-Musa-Fall/CPLN5500 TP/lectures lab/ Transportation data and the transportation plan/4_Trip_Public.csv")
View(trip)
View(hh)
combine <- merge(trip, hh, by="ID")
View(combine)
setwd("~/Documents/GitHub/Dashboard-L.Xiaofan")
library(dplyr)
crime <- read.csv("incidents_part1_part2.csv")
View(crime)
table(crime$text_general_code)
library(sf)
library(sf)
library(dplyr)
library(sf)
library(tidyverse)
library(tidycensus)
crime.sf <- crime %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102728')
crime.sf <- crime %>%
na.omit() %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102728')
View(crime.sf)
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
tracts00 <-
st_read(file.path(root.dir,"/Chapter1/PHL_CT00.geojson")) %>%
st_transform('ESRI:102728')
View(tracts00)
ggplot() +
geom_sf(data = totalPop00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .75)
ggplot() +
geom_sf(data = tracts00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .75)
ggplot() +
geom_sf(data = tracts00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .25)
ggplot() +
geom_sf(data = tracts00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .15)
ggplot() +
geom_sf(data = tracts00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .1)
ggplot() +
geom_sf(data = tracts00, fill = "grey") +
geom_sf(data = crime.sf,
show.legend = "point", size = .01)
names(crime.sf)
crime.sf <- crime %>%
na.omit() %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102728') %>%
dplyr::select(cartodb_id, dispatch_date, dispatch_time, location_block, text_general_code)
View(crime.sf)
